@inject IBookRepository BookRepository
@inject NavigationManager NavigationManager
<PageTitle>@Title</PageTitle>

@if(Book is not null)
{
    <EditForm Enhance="true" method="post" FormName="AddOrEditBookForm" OnValidSubmit="AddOrEditBook" Model="Book" autocomplete="off">
        <h3>
            @Title
        </h3>
        @if(IsEditMode){
            <input type="hidden" name="Book.Id" value="@Book.Id" />
        }
        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control shadow-none" @bind-Value="Book.Title" />
        </div>
        <div class="mb-3">
            <label for="author" class="form-label">Author</label>
            <InputText id="author" class="form-control shadow-none" @bind-Value="Book.Author" />
        </div>
        <div class="mb-3">
            <label for="publication-date" class="form-label">Publication Date</label>
            <InputDate id="publication-date" class="form-control shadow-none" @bind-Value="Book.PublicationDate" />
        </div>
        <div class="mb-3">
            <label for="category class="form-label">
                Category
            </label>
            <InputSelect id="category" @bind-Value="Book.Category" class="form-control shadow-none">
                <option value="0">Select</option>
                @foreach (var cat in Enum.GetValues(typeof(Category)))
                {
                    <option value="@cat">@cat.ToString()</option>
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <button class="btn btn-success shadow-none">Submit</button>
            @* data-enhance-nav="false" will refresh page when button get click *@
            <a href="/" class="btn btn-secondary shadow-none ms-3">
                Back to List
            </a>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>

}
@code {
    [Parameter]
    public bool IsEditMode { get; set; } = false; 
    
    [Parameter]
    public int BookId { get; set; }

    [SupplyParameterFromForm]
    public Book? Book { get; set; } 

    private string Title => IsEditMode ? $"Edit Book {BookId}" : "Add New Book";
    [Parameter]
    public EventCallback<Book> OnValidBookSubmit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            Book ??= await BookRepository.GetByIdAsync(BookId);
        }
        else
        {
            Book ??= new();
        }
    }

    private async Task AddOrEditBook()
    {
        await OnValidBookSubmit.InvokeAsync(Book);
    }
}
